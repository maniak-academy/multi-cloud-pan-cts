slug: panaorama-multicloud-nia

version: 0.0.1
type: track
title: Panorama Multicloud Terraform Consul NIA
teaser: Leverage the HashiCorp stack to provide network automation across multicloud secure environment
description: |-
  The following workshop will provie hands on experiance in network autoatmion
  Consul will enforce mTLS and network policy.
  Finally, Boundary will secure remote access for human users such as DBAs and Linux admins.

  [Workshop Slides](https://docs.google.com/presentation/d/1og3T3rfXtMiaJChL2TEBkUH01Tz5vDSXJR1PDegs1Po/edit#slide=id.g104306241d1_3_0)

icon: https://storage.googleapis.com/instruqt-hashicorp-tracks/logo/HashiCorp_Icon_Black.png
tags:
- Vault
- Consul
- NIA
- paloalto
- pan
owner: hashicorp
developers:
- sebastian.maniak@hashicorp.com
private: true
published: true
show_timer: true
skipping_enabled: false
challenges:
- slug: 01-Environment-Overview

  type: challenge
  title: Environment Overview
  teaser: Let's dive into this lab
  notes:
  - type: text
    contents: |-
      Add information about the lab

      Panorama 
      
  - type: text
    contents: |-
      Add information about the lab

      Cloud infrastructure 

      <img src="https://github.com/Andrew-Klaas/instruqt-zt-lab/raw/main/assets/diagrams/0-auth.png" width=800px height=400px>

  - type: text
    contents: |-
      Deploy PAN OS

      <img src="https://github.com/Andrew-Klaas/instruqt-zt-lab/raw/main/assets/diagrams/0-auth.png" width=800px height=400px>

  - type: text
    contents: |-
      Deploy APPS

      <img src="https://github.com/Andrew-Klaas/instruqt-zt-lab/raw/main/assets/diagrams/0-auth.png" width=800px height=400px>

  - type: text
    contents: |-
      Deploy CTS

      <img src="https://github.com/Andrew-Klaas/instruqt-zt-lab/raw/main/assets/diagrams/0-auth.png" width=800px height=400px>
      
  assignment: |-
    


  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  - title: Goapp - Vault code
    type: code
    hostname: hashistack-server
    path: /tmp/aws-vault-go-demo-tokenization/config/db.go
  difficulty: basic
  timelimit: 600
- slug: 02-vault-dynamic-secrets
  id: kqyrabasn1cy
  type: challenge
  title: Vault dynamic secrets
  teaser: Create least priviledge & just-in-time database credentials.
  notes:
  - type: text
    contents: |-
      Vault's database secrets engine generates short-lived credentials dynamically based on configured roles.

      Services no longer need hardcoded or static credentials. They can request the secret from Vault, and use Vault's leasing mechanism to keep those credentials renewed or to pull new ones after expiration.

      Since every service is accessing the database with unique credentials, this makes auditing easier when questionable data access is discovered. You can track it down to the specific instance of a service based on the SQL username.
  - type: text
    contents: |-
      In this challenge we will configure Vault to create lease priviledged Postgres credentials

      <img src="https://github.com/Andrew-Klaas/instruqt-zt-lab/raw/main/assets/diagrams/1-dbsecrets.png"
      width=800px height=400px>
  assignment: |-
    First, log back into Vault as our admin user on the "Server" tab.
    ```
    vault login -method=userpass username=vault password=vault
    ```
    List currently mounted secret engines.
    ```
    vault secrets list
    ```
    The PostgreSQL database secret engine has already been mounted and configured for you

    To configure the secret engine we need to give Vault admin level credentials that enable creation and deletion of database users.
    We also set the connection_url in this setup so Vault can locate the database.

    Run the following command.
    ```
    vault write database/config/my-postgresql-database \
      plugin_name=postgresql-database-plugin \
      allowed_roles="my-role, vault_go_demo" \
      connection_url="postgresql://{{username}}:{{password}}@postgres.service.consul:5432/vault_go_demo?sslmode=disable" \
      username="postgres" \
      password="password"
    ```
    Next, we configure a secret engine role. In this step we can customize the creation_statements used by Vault for creating users.

    Creation_statements are used to grant different permissions for users to read, write, etc. from databases.

    We also set the database credential time-to-live and max time-to-live. After the TTL expires, the credential will be deleted from the database by Vault unless your applicaiton renews it. Credentials can be renewed up until the max-ttl expires.
    ```
    vault write database/roles/vault_go_demo \
      db_name=my-postgresql-database \
      creation_statements="CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}'; \
      ALTER USER \"{{name}}\" WITH SUPERUSER;" \
      default_ttl="1h" \
      max_ttl="24h"
    ```
    Test the secret engine.
    ```
    vault read database/creds/vault_go_demo
    ```
    You should see Vault's dynamically generated username and password for PostreSQL. Every read to this secret engine will create a unique credential.

    Let's learn how Vault can be used to encrypt customer PII data such as credit card or social security numbers.
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  difficulty: basic
  timelimit: 600
- slug: 03-vault-tokenization-eaas
  id: jqwymtoguy41
  type: challenge
  title: Vault Transform secret engine (Tokenization/EaaS)
  teaser: Protect critical customer data.
  notes:
  - type: text
    contents: |-
      The Transform secrets engine handles secure data transformation and tokenization against provided secrets.

      Transformation methods encompass NIST vetted cryptographic standards such as format-preserving encryption (FPE) via FF3-1 to encode your secrets while maintaining the data format and length.

      In addition, it can also perform pseudonymous transformations of the data through other means, such as masking.
  - type: text
    contents: |-
      Our application will send plaintext customer data to Vault to be encrypted and returned before writing to Postgres.

      <img src="https://github.com/Andrew-Klaas/instruqt-zt-lab/raw/main/assets/diagrams/2-tokenization.png"
      width=800px height=400px>
  assignment: |-
    The Transform secret engine has already been mounted for you
    ```
    vault secrets list
    ```
    We first need to configure the secret engine to use tokenization.
    Our golang application will be leveraging tokenization to protect customer data and meet PCI compliance of non-repudiation (Non reversible data).

    Lets configure a named role in Vault for our secret engine. We also declare a transformation of name "ssn" we will define that in the next step.
    ```
    vault write transform/role/vault_go_demo transformations=ssn
    ```
    "Transformations" contain information about the type of data transformation that we want to perform, the template that it should use for value detection, and other transformation-specific values such as the tweak source or the masking characters to use.
    In this case, we are using tokenization instead of format preserving encryption so the configuration is more simple. (No special formatting required)

    Define the transformation.
    ```
    vault write transform/transformations/tokenization/ssn \
      allowed_roles=vault_go_demo \
      max_ttl=24h
    ```
    Now we can test tokenizing (called "encoding") a value.
    ```
    export ENCODED_VAULT=$(vault write -format=json \
      transform/encode/vault_go_demo value=1111-2222-3333-4444 \
      transformation=ssn \
      | jq -r '.data.encoded_value')

    echo $ENCODED_VAULT
    ```
    Next, decode the tokenized value from above.
    ```
    vault write transform/decode/vault_go_demo value="${ENCODED_VAULT}" transformation=ssn
    ```
    You should see the original value in plaintext.

    Next, we will test our web application.
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  difficulty: basic
  timelimit: 600
- slug: 04-test-app
  id: c5zycezukwae
  type: challenge
  title: Test the application
  teaser: Write an example record to the application.
  notes:
  - type: text
    contents: With our application integrated with Vault, we can now test creating
      a customer record.
  assignment: |-
    Switch to the "Client 1" terminal and restart the application.

    NOTE: You may need to run this command twice due to a DNS issue.
    ```
    systemctl start goapp
    ```
    Switch to the "App UI" tab.

    Now test the App UI by adding a customer Record.

    Navigate to the "Add Record" button and fill in example data. Once submitted, you will be redirected to the applications view of all detokenized data.

    Next, switch to the "Database View" tab. You should see that your new record's SSN has been tokenized. This is what a logged in database user would see if inspecting Postgres.
    If anyone where to compromise your database, they now would be unable to reverse this data.

    Further Reading: Our application should be leveraging TLS certificates for secure connections.
    We could have integrated it with the Vault PKI secrets engine to do so: https://learn.hashicorp.com/tutorials/vault/pki-engine
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  difficulty: basic
  timelimit: 600
- slug: 05-consul-ui
  id: onnejylpe8tv
  type: challenge
  title: Explore the Consul UI
  teaser: Monitor Consul nodes & services via the UI.
  notes:
  - type: text
    contents: |-
      Consul is a service networking solution to automate network configurations, discover services, and enable secure connectivity across any cloud or runtime.

      We will first get to know Consul by exploring the UI.
  assignment: |-
    Consul's UI allows you to view and interact with Consul via a graphical user interface, which can lower the barrier of entry for new users, and ease troubleshooting.
    The Consul UI enables you to view all information about your Consul datacenter.

    Access the Consul UI tab.

    Consul UI Navigation is on the left hand side bar.

    The "Nodes" section shows registered nodes, both Consul servers and clients. You can drill down further to find a nodes IP address, health checks, metadata, and other information.

    The "Services" section shows registered services and their sidecar proxies. You can drill down further to find network topologies, assosciated intentions, the number of instances of an application, and other information.

    As an example, click on the goapp service. The topology diagram should show a connection to the backend postgres service.

    Additionally, you can view and update the following information through the Consul UI:

    Consul Key-value pairs can be read/written in the "Key/Value" section

    The "Intentions" section is where we manage network policy. We will cover that in a later section.

    They are disabled in this demo, but Consul auth methods and Access Control List (ACL) tokens can also be managed in the UI.
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  difficulty: basic
  timelimit: 600
- slug: 06-consul-services
  id: kiuymimbpn9n
  type: challenge
  title: Defining Consul Services
  teaser: Create a simple service definition to declare the availability of a service
    in the Consul catalog.
  notes:
  - type: text
    contents: |-
      One of the major use cases for Consul is called "service discovery". Consul provides a DNS interface that downstream services can use to find the IP addresses of their upstream dependencies.
      Consul knows where these services are located because each service registers with its local Consul client.

      Operators can register services manually, configuration management tools can register services when they are deployed, or container orchestration platforms can register services automatically via integrations.
  - type: text
    contents: |-
      In this challenge we will leverage Consul for registering our application and database services.

      <img src="https://github.com/Andrew-Klaas/instruqt-zt-lab/raw/main/assets/diagrams/3-connect.png"
      width=800px height=400px>
  assignment: |-
    Switch to the "Client 1" terminal. Let's check the Consul Agent Config first.
    ```
    cd /etc/consul.d/
    cat consul.hcl
    ```
    This consul agent is running in "client" mode. The configuration is used to set several options such as which address to bind to, where the Consul servers are that we want to join, and other info like log levels.
    ```
    datacenter = "dc1"
    retry_join = ["hashistack-server"]
    retry_interval = ["5s"]
    data_dir = "/tmp/consul"
    server = false
    log_level = "DEBUG"
    node_name = "hashistack-client-1"
    client_addr = "10.132.0.181 127.0.0.1"
    bind_addr = "10.132.0.181"
    ui = true
    ports {
      grpc = 8502
    }
    ```
    Next lets check our webapp's service definition.
    ```
    cat goapp.hcl
    ```
    This file is used to define the name/ports of the service we want Consul to register & monitor, how to configure a sidecar proxy, health checks, etc.

    We will discuss the "connect" stanza in more detail in the next section.
    ```
    service {
      name = "goapp"
      tags = [ "goapp" ]
      port = 9090
      connect {
        sidecar_service {
          proxy {
            upstreams = [
              {
                destination_name = "postgres"
                local_bind_port  = 5432
              }
            ]
          }
        }
      }
    }
    ```
    Switch to the Client 2 terminal to check our postgres service definition.
    ```
    cd /etc/consul.d/
    cat postgres.hcl
    ```
    We've included an example health check under the "check" stanza. Consul will run a tcp check against the local postgres database on 10 second intervals.
    You can also configure Consul to execute a script or perform HTTP checks as well.
    ```
    service {
      name = "postgres"
      tags = [ "postgres" ]
      port = 5432
      connect {
        sidecar_service {
          proxy {
            config {
              protocol = "tcp"
            }
          }
        }
      }
      check {
        id       = "postgresql-check"
        tcp      = "127.0.0.1:5432"
        interval = "10s"
      }
    }
    ```
    You can view all services registered in Consul via the following command.
    ```
    consul catalog services
    ```
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  difficulty: basic
  timelimit: 600
- slug: 07-consul-dns
  id: 4ufy2zk3wj3d
  type: challenge
  title: Testing Consul DNS
  teaser: Use Consul DNS to locate services.
  notes:
  - type: text
    contents: |-
      One of the primary query interfaces for Consul is DNS. The DNS interface allows applications to make use of service discovery without any high-touch integration with Consul.

      For example, instead of making HTTP API requests to Consul, a host can use the DNS server directly via name lookups like redis.service.us-east-1.consul. This query automatically translates to a lookup of nodes that provide the redis service, are located in the us-east-1 datacenter, and have no failing health checks. It's that simple!
  assignment: |-
    Switch to the Client 1 tab.

    We've already configured the nodes to leverage Consul for resolving any "*.consul" domains.

    Use the dig command to find our postgres database registered in Consul.
    ```
    dig postgres.service.consul
    ```
    You should see the IP address of the postgres database returned!

    Example:
    ```
    ;; ANSWER SECTION:
    postgres.service.consul. 0      IN      A       10.132.0.184
    ```
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  difficulty: basic
  timelimit: 600
- slug: 08-define-consul-intentions
  id: 978rumtsfwey
  type: challenge
  title: Defining Consul Intentions (Network Policy)
  teaser: Define access control for services via Consul Connect.
  notes:
  - type: text
    contents: |-
      Consul Intentions define access control for services via Connect and are used to control which services may establish connections or make requests.

      Intentions are enforced on inbound connections or requests by the proxy or within a natively integrated application.

      Depending upon the protocol in use by the destination service, you can define intentions to control Connect traffic authorization either at networking layer 4 (e.g. TCP) and application layer 7 (e.g. HTTP)
  - type: text
    contents: |-
      In this challenge, we configure Consul Service Mesh to connect and authorize connections between services

      <img src="https://github.com/Andrew-Klaas/instruqt-zt-lab/raw/main/assets/diagrams/4-intention.png"
      width=800px height=400px>
  assignment: |2-

    Let's look at our webapp and database service definitions to understand how Connect is configured.

    Switch to the "Client 1" tab. We will review the service configuration again with a focus on connect.
    ```
    cd /etc/consul.d/
    cat goapp.hcl
    ```
    The Connect stanza holds configuration for this service's sidecar proxy.

    First, note the sidecar stanza within the connect stanza.

    ```
    connect {
      sidecar_service {
        proxy {
          upstreams = [
            {
              destination_name = "postgres"
              local_bind_port  = 5432
            }
          ]
        }
      }
    }
    ```

    Connect proxies are typically deployed as "sidecars" that run on the same node as the service instance that they handle traffic for. They might be on the same VM or running as a separate container in the same network namespace.
    In this case, we will be leveraging Envoy as the sidecar proxy.

    Next we define proxy "upstreams". These upstreams determine which backend services this local webapp/proxy is able to direct traffic too.
    Within the upstreams stanza we define the destination service (regsistred in Consul) and a local port to bind too.

    Then our service will connect to that configured local port instead of a remote address.
    Note: Consul also supports Transparent Proxying - https://www.consul.io/docs/connect/transparent-proxy

    In our frontend webapp's case, we configured the proxy to direct traffic to the backend postgres database on the local port 5432.

    Next, switch to the "Client 2" tab
    ```
    cd /etc/consul.d/
    cat postgres.hcl
    ```
    This backend service does not have any upstreams, so the configuration is a bit more simple.

    ```
    connect {
    sidecar_service {
      proxy {
          config {
            protocol = "tcp"
          }
        }
      }
    }
    ```
    The only real difference is that we specified the protocol. Consul also supports http/http2/tcp/gRPC.

    With an understanding of our sidecar/connect configurations. Let's now test allowing and denying traffic.
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  difficulty: basic
  timelimit: 600
- slug: 09-test-consul-intentions
  id: xslnysgv6mzj
  type: challenge
  title: Testing Consul Intentions
  teaser: Create deny & allow rules for accessing Postgres.
  notes:
  - type: text
    contents: You can define a service-intentions configuration entry to create and
      manage intentions, as well as manage intentions through the Consul UI. You can
      also perform some intention-related tasks using the API and CLI commands.
  assignment: |-
    Switch to the "Client 1" tab.

    First, let's deny access from the webapp to the database. we define the following service-intention configuration as code.

    This intention specifices that connections from the source service "goapp" will be denied to the backend "Name" postgres.
    ```
    cat << EOF > ~/config-intentions-postgres-deny.hcl
    Kind = "service-intentions"
    Name = "postgres"
    Sources = [
      {
        Name   = "goapp"
        Action = "deny"
      },
      # NOTE: a default catch-all based on the default ACL policy will apply to
      # unmatched connections and requests. Typically this will be DENY.
    ]
    EOF
    consul config write config-intentions-postgres-deny.hcl
    ```
    Consul Connect/Envoy will not affect existing connections so we will need to restart the application for the changes to take effect.

    Restart the application from the Client 1 tab.
    ```
    systemctl restart goapp
    ```
    You should see that the webapp failed to start.
    Note: try adding a record to see a failure as the webpage may be cached.

    Switch back to the "Client 1" tab.

    Now, let's enable traffic between the webapp and postgres so our connection succeeds.
    ```
    cat << EOF > ~/config-intentions-postgres-allow.hcl
    Kind = "service-intentions"
    Name = "postgres"
    Sources = [
      {
        Name   = "goapp"
        Action = "allow"
      },
      # NOTE: a default catch-all based on the default ACL policy will apply to
      # unmatched connections and requests. Typically this will be DENY.
    ]
    EOF
    consul config write config-intentions-postgres-allow.hcl
    ```
    You can see we've changed the Action to "allow".

    Consul Connect/Envoy will not affect existing connections so we will need to restart the application for the changes to take effect.

    You may need to restart a second time.
    ```
    systemctl restart goapp
    ```
    You should see the webapp successfully start now as it was able to connect and initalize the database.

    Great work! With our application and database talking over a secure connection, we can now move on to securing human access to these resources.
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  difficulty: basic
  timelimit: 600
- slug: 10-configure-boundary-and-vault
  id: j5btwrjmcgx5
  type: challenge
  title: Configure Boundary and Vault
  teaser: Configure Vault to issue credentials for Boundary.
  notes:
  - type: text
    contents: |-
      Boundary provides a secure way to access hosts and critical systems without having to manage credentials or expose your network.

      Boundary 0.4.0 adds a Vault integration for the brokering of Vault secrets to Boundary clients via the command line and desktop clients for use in their Boundary sessions.

      This feature enables Boundary as a credential broker for infrastructure targets by binding credentials with user sessions, and surfacing those credentials during session initialization.
  - type: text
    contents: |-
      We will configure Boundary to retrieve dynamic credentials from Vault in this challenge.

      <img src="https://github.com/Andrew-Klaas/instruqt-zt-lab/raw/main/assets/diagrams/5-boundary-vault.png"
      width=800px height=400px>
  assignment: |-
    Login to Vault on using the "Server" tab
    ```
    vault login -method=userpass username=vault password=vault
    ```
    Next, we will configure Boundary using HashiCorp Terraform.

    Terraform is an open-source infrastructure as code software tool that enables you to safely and predictably create, change, and improve infrastructure.

    Change into the terraform-boundary directory where our Terraform config is stored
    ```
    cd terraform-boundary/
    cat boundary-controller-policy.hcl
    ```
    Boundary needs to lookup, renew, and revoke tokens and leases in order to broker credentials from Vault properly.

    Next, we will create a Vault token for the Boundary Server to use.

    ```
    vault policy write boundary-controller boundary-controller-policy.hcl
    vault token create \
      -no-default-policy=true \
      -policy="boundary-controller" \
      -policy="go-app" \
      -orphan=true \
      -period=20m \
      -renewable=true
    ```

    Save the "token" from the above output. You will pass this value to Terraform in the "apply" step below.
    ```
    #example: Save this from above. You will pass it to Terraform apply.
    s.5DyL8vhy0AA3ke42WbWG4r5A
    ```

    Initialize terraform.
    ```
    #feed token to terraform
    terraform init;
    ```
    Once satisified, apply the configuration. You will need to pass the Vault token from above to the Terraform CLI command.
    ```
    terraform apply --auto-approve;
    ```

    Once Terraform successfully configures Boundary, we can move on to the next challenge.
    ```
    apply complete! Resources: 20 added, 0 changed, 0 destroyed.
    ```
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Boundary UI
    type: service
    hostname: hashistack-server
    port: 9200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  - title: Terraform Editor
    type: code
    hostname: hashistack-server
    path: /root/terraform-boundary/main.tf
  difficulty: basic
  timelimit: 600
- slug: 11-boundary-ui
  id: nd6xsy348mhi
  type: challenge
  title: Explore the Boundary UI
  teaser: Get familiar with Boundary projects and targets.
  notes:
  - type: text
    contents: |-
      Boundary supports CLI, API, and a GUI for interacting with the service. In this exercise you will explore the GUI and find available targets to securely access.

      Boundaries domain model is explained in detail here -> https://www.boundaryproject.io/docs/concepts/domain-model
  assignment: |-
    Login to Boundary in the "Boundary UI" tab
    ```
    username: admin
    password: password
    ```
    Boundary's top level domain unit is called an "Org" or "Organization" (they are also called Scopes).

    Scopes are a foundational part of Boundary. They allow users to partition resources and assign ownership of resources to principals.

    Find more details at https://learn.hashicorp.com/tutorials/boundary/manage-scopes?in=boundary/basic-administration

    First, navigate to the corp_one Org. This is where our resources were defined and configured in the last challenge.

    Within Scopes are Projects. Projects contain Targets and Host Catalogs (the actual resources/VMs/databases/APIs we are securing)

    Click on "core_infra". Then click "Targets" on the left hand side.

    Copy the Postgres_server Target. We will access this in the next challenge so save the value.
    It should look like:
    ```
    ttcp_tGJJUmCsrP
    ```

    Set an environment variable on the "Server" tab with your copied target id.
    ```
    #Copy the postgres_server target from the corp_one org
    export POSTGRES_TARGET=
    ```
    We can now move on to testing Boundary for secure access.
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Boundary UI
    type: service
    hostname: hashistack-server
    port: 9200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  difficulty: basic
  timelimit: 600
- slug: 12-connect-to-database
  id: v5hh6i7cg6ej
  type: challenge
  title: Test Boundary secure access management.
  teaser: Leverage Boundary to securely connect to PostgreSQL.
  notes:
  - type: text
    contents: We will now simulate what short-lived database access to PostgreSQL
      would look like for an end user.
  - type: text
    contents: |-
      In this challenge, you will securely access PostgreSQL via Boundary.
      <img src="https://github.com/Andrew-Klaas/instruqt-zt-lab/raw/main/assets/diagrams/6-access.png" width=800px height=400px>
  assignment: |-
    Login to Boundary via the CLI on the "Server" tab.
    ```
    export BOUNDARY_TOKEN=$(boundary authenticate password -auth-method-id ampw_1234567890 -login-name admin -password "password" -keyring-type=none -format=json | jq -r '.item.attributes.token')
    echo $BOUNDARY_TOKEN
    ```
    If you haven't in the prior challenge, copy the postgres_server target from the corp_one org and set an environment variable.

    ```
    export POSTGRES_TARGET=ttcp_uJw5GWOygZ
    ```
    Next authorize a session to acess Postgres. This will create an authorization token and return dynamic database credentials from Vault.

    ```
    boundary targets authorize-session -id  $POSTGRES_TARGET
    ```
    The Boundary CLI will automatically use the above information and the returned dynamic database credentials.
    We can now connect to the database!

    You may need to run this twice as it can error on the first call.
    ```
    boundary connect postgres -target-id $POSTGRES_TARGET --dbname vault_go_demo
    ```
    Test a few database commands!
    ```
    \l
    \du
    \q
    SELECT * FROM vault_go_demo;
    ```
    you can also test SSH'ing to the database host via Boundary. Switch back to the Boundary UI and copy the "ssh_server" target.

    ```
    # SSH: ssh_server target (client2)
    export SSH_TARGET=
    ```
    Then connect to the host.
    You may need to run this twice as it can error on the first call.
    ```
    boundary connect ssh -target-id $SSH_TARGET
    ```

    Congratulations! You've successfully learned how to secure application passwords, customer data, networking between services, and access to infrastructure resources!

    To continue on your journey, please refer to the following docs for more information on use-cases, deployments, etc.

    Vault: https://www.vaultproject.io/docs

    Consul: https://www.consul.io/docs

    Boundary: https://www.boundaryproject.io/docs
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Boundary UI
    type: service
    hostname: hashistack-server
    port: 9200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  - title: Terraform Editor
    type: code
    hostname: hashistack-server
    path: /root/terraform-boundary/main.tf
  difficulty: basic
  timelimit: 20000
checksum: "17877927453110360668"
